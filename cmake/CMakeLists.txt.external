include(ExternalProject)
include(FetchContent)

# include(ExternalProject)
function(ADD_EXTERNAL_DEPS )
    # GLFW
    FetchContent_Declare(
        glfw
        GIT_REPOSITORY  https://github.com/luclepot/glfw/
        GIT_TAG redhat-compile-changes
        GIT_SHALLOW TRUE
        GIT_PROGRESS TRUE
    )
    FetchContent_MakeAvailable(glfw)
    include_directories(${CMAKE_CURRENT_BINARY_DIR}/../_deps/glfw-src/include)

    # spdlog
    FetchContent_Declare(
        spdlog
        GIT_REPOSITORY  https://gitlab.cern.ch/atlas-sw-misc/spdlog.git
        GIT_TAG v1.9.2.x
        SOURCE_SUBDIR  spdlog
    )
    FetchContent_MakeAvailable(spdlog)
    include_directories(${CMAKE_CURRENT_BINARY_DIR}/../_deps/spdlog-src/include)

    # GLM
    FetchContent_Declare(
        glm
        GIT_REPOSITORY	https://github.com/g-truc/glm.git
        GIT_TAG 	bf71a834948186f4097caa076cd2663c69a10e1e #refs/tags/1.0.1
    )
    FetchContent_MakeAvailable(glm)
    include_directories(${CMAKE_CURRENT_BINARY_DIR}/../_deps/glm-src/glm)

    #libzmq
    set(ZMQ_BUILD_TESTS    OFF CACHE BOOL "Turn off libzmq build tests.")
    set(ZMQ_BUILD_EXAMPLES OFF CACHE BOOL "Turn off libzmq build examples.")
    set(WITH_PERF_TOOL     OFF CACHE BOOL "Turn off libzmq performance tools.")
    FetchContent_Declare(
    libzmq
    GIT_REPOSITORY https://github.com/zeromq/libzmq.git
    GIT_TAG        v4.3.0
    )
    FetchContent_MakeAvailable(libzmq)
    foreach(target_name libzmq libzmq-static libzmq-shared)
        if(TARGET ${target_name})
            target_compile_options(${target_name} PRIVATE $<$<COMPILE_LANGUAGE:CXX>:-Wno-non-virtual-dtor>
            $<$<COMPILE_LANGUAGE:CXX>:-Wno-tautological-constant-compare>)
        endif()
    endforeach()

    #cppzmq (C++ binding)
    set(CPPZMQ_BUILD_TESTS     OFF CACHE BOOL "Turn off cppzmq build tests.")
    set(CPPZMQ_BUILD_EXMAMPLES OFF CACHE BOOL "Turn off cppzmq build tests.")
    FetchContent_Declare(
    cppzmq
    GIT_REPOSITORY https://github.com/zeromq/cppzmq.git
    GIT_TAG        v4.10.0
    )
    FetchContent_MakeAvailable(cppzmq)
    include_directories(${CMAKE_CURRENT_BINARY_DIR}/../_deps/cppzmq-src)

    #Corryvreckan
    FetchContent_Declare(
        corryvreckan
        GIT_REPOSITORY https://gitlab.cern.ch/kabel/corryvreckan.git
        GIT_TAG        master
    )

    #Many used paths in the CMakeLists of Corryvreckan are relative to CMAKE_SOURCE_DIR.
    #This is a problem as CMAKE_SOURCE_DIR is a global read-only variable that references the full path to the top level of the source tree.
    #Therefore, any paths that are relative to the CMAKE_SOURCE_DIR are relative to the source directory of the visualizer rather than the fetched Corryvreckan source directory.
    #Instead, have to replace references to CMAKE_SOURCE_DIR that could cause problems with CMAKE_PROJECT_DIR before making the content available.
    FetchContent_GetProperties(corryvreckan)
    if(NOT corryvreckan_POPULATED)
        FetchContent_Populate(corryvreckan)

        file(READ ${corryvreckan_SOURCE_DIR}/src/objects/CMakeLists.txt CORRYVRECKAN_OBJECTS_CMAKE)
        string(REPLACE "CMAKE_SOURCE_DIR" "PROJECT_SOURCE_DIR" CORRYVRECKAN_OBJECTS_CMAKE "${CORRYVRECKAN_OBJECTS_CMAKE}")
        file(WRITE ${corryvreckan_SOURCE_DIR}/src/objects/CMakeLists.txt "${CORRYVRECKAN_OBJECTS_CMAKE}")
        
        add_subdirectory(${corryvreckan_SOURCE_DIR} ${corryvreckan_BINARY_DIR})
    endif()

    #Corryvreckan CMakeLists does not create a library for its dependencies.
    #Instead, references them via a variable CORRYVRECKAN_DEPS_LIBRARIES.
    #Since variables are local to the fetched project, cannot use in top-level project.
    #Therefore, need to create the library:
    find_package(ROOT 6.20 REQUIRED COMPONENTS Minuit Minuit2 Gui GenVector Geom Core Hist RIO)
    find_package(Eigen3 REQUIRED)

    add_library(corry_lib INTERFACE)

    target_include_directories(corry_lib INTERFACE ${CMAKE_CURRENT_BINARY_DIR}/../_deps/corryvreckan-src/src)
    target_include_directories(corry_lib INTERFACE ${CMAKE_CURRENT_BINARY_DIR}/../_deps/corryvreckan-src/3rdparty)

    target_link_libraries(corry_lib INTERFACE
        Eigen3::Eigen
        ROOT::Core ROOT::GenVector ROOT::Geom ROOT::RIO ROOT::Hist ROOT::Minuit ROOT::Minuit2
        GBL
        CorryvreckanUtilities
        CorryvreckanObjects
        CorryvreckanCore
    )
endfunction()